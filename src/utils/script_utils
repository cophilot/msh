#!/bin/bash

###START###

# Create a new script
# $1 - The directory to create the script in
# $2 - The name of the script
# $3 (optional) - The description of the script
# $4 (optional) - The content of the script
# $5 (optional) - The content of the script
function create_new_script() {
    sc_dir=$1
    sc_name=$2

    script_file="$sc_dir/$sc_name"
    if [ -f "$script_file" ]
    then
        logE "The script '$sc_name' already exists"
        myexit 1
    fi

    touch $script_file
    echo "#!/bin/bash" > $script_file

    description="This is the $sc_name script"
    if [ -n "$3" ]
    then
        description=$3
    fi
    description="#??$description"
    echo "$description" >> $script_file
    echo "#&&TAGS" >> $script_file
    echo "" >> $script_file
    if [ -n "$4" ]
    then
        echo "$4" >> $script_file
    fi
    if [ -n "$5" ]
    then
        echo "$5" >> $script_file
    fi
    chmod +x $script_file
}

function get_all_scripts() {
        colls=$(get_all_collections "true")

    all_scripts=()
    for co in $colls
    do
        if [ ! -d "$HOME_DIR/$co" ];
        then
            continue
        fi
        if [ "$co" == "bin" ];
        then
            continue
        fi
        coll_scripts=$(ls $HOME_DIR/$co)
        for script in $coll_scripts
        do
            if [ -d "$HOME_DIR/$co/$script" ];
            then
                continue
            fi
            if [[ $script == .* ]] || [[ $script == README* ]]
            then
                continue
            fi
            all_scripts+=("$script/$co")
        done
    done

    echo ${all_scripts[@]}
}

# Run a script
# $1 - The script to run
function running_script {
    script_name=$1

    read -p "Do you want to run the script? (Y/n): " answer

    if [ "$answer" == "n" ] || [ "$answer" == "N" ]
    then
        return
    fi

    read -p "Arguments: " args

    $script_name $args
}

###END###