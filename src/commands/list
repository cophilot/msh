#!/bin/bash

###START###

# List all available commands
function list_command {
	require_dir $HOME_DIR

	filter_tag=${VALUES[0]}

	all_scripts=$(get_all_scripts)

	if [ -z "$all_scripts" ]; then
		log "No scripts found"
		myexit 0
	fi

	all_scripts=$(echo ${all_scripts[@]} | tr ' ' '\n')
	if [ "$(is_flag_specified '-group' '-g')" == "false" ]; then
		all_scripts=$(echo "$all_scripts" | sort)
	fi

	if [ -n "$filter_tag" ]; then
		log "Filtering by tag: $filter_tag"
	fi

	log "Available scripts:"

	if [ "$(is_flag_specified '-simple' '-s')" == "false" ]; then
		if [ "$(is_flag_specified '-collection' '-c')" == "true" ]; then
			printf "  %-25s %-15s %s\n" "SCRIPT" "COLLECTION" "DESCRIPTION"
		else
			printf "  %-25s %s\n" "SCRIPT" "DESCRIPTION"
		fi
	fi

	for script in $all_scripts; do
		# Split script path
		IFS='/' read -r script co <<<"$script"

		co_path="$HOME_DIR/$co"
		if [ -d "$co_path/bin" ]; then
			co_path="$co_path/bin"
		fi

		sc_path="$co_path/$script"

		# Read the file content once
		file_content=$(<"$sc_path")

		if [[ $file_content == *"@@@MSH-PYTHON@@@"* ]]; then
			sc_path="$co_path/__py/$script.py"

			if [ -f "$sc_path" ]; then
				file_content=$(<"$sc_path")
			fi
		fi

		# Extract description and tags using parameter substitution
		description=$(grep -m 1 -o "#??.*" <<<"$file_content" | cut -c4-)
		tags=$(grep -m 1 -o "#&&.*" <<<"$file_content" | cut -c4-)

		# Process filter tag if necessary
		if [ -n "$filter_tag" ]; then
			lower_filter_tag=${filter_tag,,} # Convert to lowercase
			lower_tags=${tags,,}             # Convert tags to lowercase
			[[ ! $lower_tags =~ $lower_filter_tag ]] && continue
		fi

		# Format tags
		tags="[${tags:-}]"

		# Simplify conditions
		if [ "$(is_flag_specified '-simple' '-s')" == "true" ]; then
			log "  $script - $description $tags"
			continue
		fi

		# Output formatted details
		if [ "$(is_flag_specified '-collection' '-c')" == "true" ]; then
			printf "  %-25s %-15s %s\n" "$script" "$co" "$description $tags"
		else
			printf "  %-25s %s\n" "$script" "$description $tags"
		fi
	done

}

# Print help for the list command
function list_help {
	log "  list|ls [tag] [flags] - List all available commands"
	log "      tag - If provided, only scripts with the specified tag will be listed"
	log "      Flags:"
	log "          -collection|-c - Show the collection of the scripts"
	log "          -group|-g - Group the scripts by collection"
	log "          -simple|-s - Print the list in a simple format"
	log ""
}

# Short form of the list command
function ls_command {
	list_command $*
}

###END###
